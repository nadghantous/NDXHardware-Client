{"ast":null,"code":"import { retrieveUsers, createUser } from '../../actions/actions';\nimport { toast } from 'react-toastify';\nexport const GET_USERS_STARTED = 'GET_USERS_STARTED';\nexport const GET_USERS_SUCCESS = 'GET_USERS_SUCCESS';\nexport const GET_USERS_ERROR = 'GET_USERS_ERROR';\nexport const CREATE_USER_STARTED = 'CREATE_USER_STARTED';\nexport const CREATE_USER_SUCCESS = 'CREATE_USER_SUCCESS';\nexport const CREATE_USER_ERROR = 'CREATE_USER_ERROR';\nimport 'react-toastify/dist/ReactToastify.css';\ntoast.configure();\nconst usersActions = {\n  retrieveUsers: () => async dispatch => {\n    try {\n      dispatch({\n        type: GET_USERS_STARTED\n      });\n      let response = await retrieveUsers();\n      dispatch({\n        type: GET_USERS_SUCCESS,\n        payload: {\n          data: response\n        }\n      });\n    } catch (error) {\n      toast.error('ERROR GETTING USERS' + error);\n      dispatch({\n        type: GET_USERS_ERROR\n      });\n    }\n  },\n  createUser: data => async dispatch => {\n    try {\n      dispatch({\n        type: CREATE_USER_STARTED\n      });\n      await createUser(data);\n      dispatch({\n        type: CREATE_USER_SUCCESS,\n        payload: {\n          message: 'Account Created Succesfully !'\n        }\n      });\n      toast.success(\"Account Successfully Created!\");\n    } catch (err) {\n      dispatch({\n        type: CREATE_USER_ERROR,\n        payload: {\n          message: 'failed to create account!'\n        }\n      });\n    }\n  }\n};\nexport default usersActions;","map":{"version":3,"sources":["/home/nadghantous/Desktop/nadghantousprojects/react/csis-myapp-test/src/redux/actions/users.js"],"names":["retrieveUsers","createUser","toast","GET_USERS_STARTED","GET_USERS_SUCCESS","GET_USERS_ERROR","CREATE_USER_STARTED","CREATE_USER_SUCCESS","CREATE_USER_ERROR","configure","usersActions","dispatch","type","response","payload","data","error","message","success","err"],"mappings":"AAAA,SAASA,aAAT,EAAuBC,UAAvB,QAAyC,uBAAzC;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAEA,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AAEP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,uCAAP;AACAN,KAAK,CAACO,SAAN;AAEA,MAAMC,YAAY,GAAG;AAEnBV,EAAAA,aAAa,EAAE,MAAM,MAAOW,QAAP,IAAoB;AACvC,QAAI;AACFA,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAET;AADC,OAAD,CAAR;AAGA,UAAIU,QAAQ,GAAG,MAAMb,aAAa,EAAlC;AACAW,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAER,iBADC;AAEPU,QAAAA,OAAO,EAAE;AACPC,UAAAA,IAAI,EAAEF;AADC;AAFF,OAAD,CAAR;AAMD,KAXD,CAWE,OAAOG,KAAP,EAAc;AACdd,MAAAA,KAAK,CAACc,KAAN,CAAY,wBAAwBA,KAApC;AACAL,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEP;AADC,OAAD,CAAR;AAGD;AACF,GApBkB;AAqBnBJ,EAAAA,UAAU,EAAGc,IAAD,IAAU,MAAOJ,QAAP,IAAoB;AACxC,QAAI;AACFA,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEN;AADC,OAAD,CAAR;AAGA,YAAML,UAAU,CAACc,IAAD,CAAhB;AACAJ,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEL,mBADC;AAEPO,QAAAA,OAAO,EAAE;AACPG,UAAAA,OAAO,EAAE;AADF;AAFF,OAAD,CAAR;AAMAf,MAAAA,KAAK,CAACgB,OAAN,CAAc,+BAAd;AACD,KAZD,CAYE,OAAOC,GAAP,EAAY;AACZR,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEJ,iBADC;AAEPM,QAAAA,OAAO,EAAE;AACPG,UAAAA,OAAO,EAAE;AADF;AAFF,OAAD,CAAR;AAOD;AACF;AA3CkB,CAArB;AA8CA,eAAeP,YAAf","sourcesContent":["import { retrieveUsers,createUser } from '../../actions/actions';\nimport { toast } from 'react-toastify'\n\nexport const GET_USERS_STARTED = 'GET_USERS_STARTED'\nexport const GET_USERS_SUCCESS = 'GET_USERS_SUCCESS'\nexport const GET_USERS_ERROR = 'GET_USERS_ERROR'\n\nexport const CREATE_USER_STARTED = 'CREATE_USER_STARTED'\nexport const CREATE_USER_SUCCESS = 'CREATE_USER_SUCCESS'\nexport const CREATE_USER_ERROR = 'CREATE_USER_ERROR'\nimport 'react-toastify/dist/ReactToastify.css';\ntoast.configure();\n\nconst usersActions = {\n\n  retrieveUsers: () => async (dispatch) => {\n    try {\n      dispatch({\n        type: GET_USERS_STARTED,\n      });\n      let response = await retrieveUsers()\n      dispatch({\n        type: GET_USERS_SUCCESS,\n        payload: {\n          data: response,\n        },\n      });\n    } catch (error) {\n      toast.error('ERROR GETTING USERS' + error)\n      dispatch({\n        type: GET_USERS_ERROR,\n      });\n    }\n  },\n  createUser: (data) => async (dispatch) => {\n    try {\n      dispatch({\n        type: CREATE_USER_STARTED,\n      });\n      await createUser(data);\n      dispatch({\n        type: CREATE_USER_SUCCESS,\n        payload: {\n          message: 'Account Created Succesfully !',\n        }\n      });\n      toast.success(\"Account Successfully Created!\");\n    } catch (err) {\n      dispatch({\n        type: CREATE_USER_ERROR,\n        payload: {\n          message: 'failed to create account!',\n        }\n      })\n     \n    }\n  }\n};\n\nexport default usersActions;"]},"metadata":{},"sourceType":"module"}