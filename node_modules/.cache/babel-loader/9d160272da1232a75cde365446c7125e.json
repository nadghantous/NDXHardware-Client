{"ast":null,"code":"import { retrieveCustomerOrders, retrieveUserPriceOrders, deleteOrder, createCustomerOrder } from '../../actions/actions';\nimport { toast } from 'react-toastify';\nexport const GET_CUSTOMERORDERS_STARTED = 'GET_CUSTOMERORDERS_STARTED';\nexport const GET_CUSTOMERORDERS_SUCCESS = 'GET_CUSTOMERORDERS_SUCCESS';\nexport const GET_CUSTOMERORDERS_ERROR = 'GET_CUSTOMERORDERS_ERROR';\nexport const CREATE_CUSTOMERORDERS_STARTED = 'CREATE_USER_STARTED';\nexport const CREATE_CUSTOMERORDERS_SUCCESS = 'CREATE_USER_SUCCESS';\nexport const CREATE_CUSTOMERORDERS_ERROR = 'CREATE_USER_ERROR';\nexport const GET_USERPRICEORDERS_STARTED = 'GET_USERPRICEORDERS_STARTED';\nexport const GET_USERPRICEORDERS_SUCCESS = 'GET_USERPRICEORDERS_SUCCESS';\nexport const GET_USERPRICEORDERS_ERROR = 'GET_USERPRICEORDERS_ERROR';\nexport const DELETE_CUSTOMERORDERS_SUCCESS = 'DELETE_CUSTOMERORDERS_SUCCESS';\nexport const DELETE_CUSTOMERORDERS_STARTED = 'DELETE_CUSTOMERORDERS_STARTED';\nexport const DELETE_CUSTOMERORDERS_ERROR = 'DELETE_CUSTOMERORDERS_ERROR';\nconst customerordersActions = {\n  retrieveCustomerOrders: data => async dispatch => {\n    try {\n      dispatch({\n        type: GET_CUSTOMERORDERS_STARTED\n      });\n      let response = await retrieveCustomerOrders(data);\n      dispatch({\n        type: GET_CUSTOMERORDERS_SUCCESS,\n        payload: {\n          data: response\n        }\n      });\n    } catch (error) {\n      toast.error('ERROR GETTING CUSTOMER ORDERS' + error);\n      dispatch({\n        type: GET_CUSTOMERORDERS_ERROR\n      });\n    }\n  },\n  createCustomerOrder: data => async dispatch => {\n    try {\n      dispatch({\n        type: CREATE_CUSTOMERORDERS_STARTED\n      });\n      await createCustomerOrder(data);\n      dispatch({\n        type: CREATE_CUSTOMERORDERS_SUCCESS,\n        payload: {\n          message: 'added successfully'\n        }\n      });\n    } catch (err) {\n      dispatch({\n        type: CREATE_CUSTOMERORDERS_ERROR,\n        payload: {\n          message: 'failed to create customer order!'\n        }\n      });\n    }\n  },\n  retrieveUserPriceOrders: data => async dispatch => {\n    try {\n      dispatch({\n        type: GET_USERPRICEORDERS_STARTED\n      });\n      let response = await retrieveUserPriceOrders(data);\n      dispatch({\n        type: GET_USERPRICEORDERS_SUCCESS,\n        payload: {\n          data: response\n        }\n      });\n    } catch (error) {\n      toast.error('ERROR GETTING CUSTOMER ORDERS BY PRICE VALUE' + error);\n      dispatch({\n        type: GET_USERPRICEORDERS_ERROR\n      });\n    }\n  },\n  deleteOrder: id => async dispatch => {\n    try {\n      dispatch({\n        type: DELETE_CUSTOMERORDERS_STARTED\n      });\n      await deleteOrder(id);\n      dispatch({\n        type: DELETE_CUSTOMERORDERS_SUCCESS,\n        payload: {\n          message: 'deleted order successfully'\n        }\n      });\n    } catch (err) {\n      dispatch({\n        type: DELETE_CUSTOMERORDERS_ERROR\n      });\n    }\n  }\n};\nexport default customerordersActions;","map":{"version":3,"sources":["/home/nadghantous/Desktop/nadghantousprojects/react/csis-myapp-test/src/redux/actions/customerorders.js"],"names":["retrieveCustomerOrders","retrieveUserPriceOrders","deleteOrder","createCustomerOrder","toast","GET_CUSTOMERORDERS_STARTED","GET_CUSTOMERORDERS_SUCCESS","GET_CUSTOMERORDERS_ERROR","CREATE_CUSTOMERORDERS_STARTED","CREATE_CUSTOMERORDERS_SUCCESS","CREATE_CUSTOMERORDERS_ERROR","GET_USERPRICEORDERS_STARTED","GET_USERPRICEORDERS_SUCCESS","GET_USERPRICEORDERS_ERROR","DELETE_CUSTOMERORDERS_SUCCESS","DELETE_CUSTOMERORDERS_STARTED","DELETE_CUSTOMERORDERS_ERROR","customerordersActions","data","dispatch","type","response","payload","error","message","err","id"],"mappings":"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","sourcesContent":["import { retrieveCustomerOrders,retrieveUserPriceOrders,deleteOrder,createCustomerOrder } from '../../actions/actions';\nimport { toast } from 'react-toastify'\n\n\nexport const GET_CUSTOMERORDERS_STARTED = 'GET_CUSTOMERORDERS_STARTED'\nexport const GET_CUSTOMERORDERS_SUCCESS = 'GET_CUSTOMERORDERS_SUCCESS'\nexport const GET_CUSTOMERORDERS_ERROR = 'GET_CUSTOMERORDERS_ERROR'\n\nexport const CREATE_CUSTOMERORDERS_STARTED = 'CREATE_USER_STARTED'\nexport const CREATE_CUSTOMERORDERS_SUCCESS = 'CREATE_USER_SUCCESS'\nexport const CREATE_CUSTOMERORDERS_ERROR = 'CREATE_USER_ERROR'\n\n\nexport const GET_USERPRICEORDERS_STARTED = 'GET_USERPRICEORDERS_STARTED'\nexport const GET_USERPRICEORDERS_SUCCESS = 'GET_USERPRICEORDERS_SUCCESS'\nexport const GET_USERPRICEORDERS_ERROR = 'GET_USERPRICEORDERS_ERROR'\n\nexport const DELETE_CUSTOMERORDERS_SUCCESS = 'DELETE_CUSTOMERORDERS_SUCCESS'\nexport const DELETE_CUSTOMERORDERS_STARTED = 'DELETE_CUSTOMERORDERS_STARTED'\nexport const DELETE_CUSTOMERORDERS_ERROR = 'DELETE_CUSTOMERORDERS_ERROR'\n\n\nconst customerordersActions = {\n\n    retrieveCustomerOrders: (data) => async (dispatch) => {\n      try {\n        dispatch({\n          type: GET_CUSTOMERORDERS_STARTED,\n        });\n        let response = await retrieveCustomerOrders(data)\n        dispatch({\n          type: GET_CUSTOMERORDERS_SUCCESS,\n          payload: {\n            data: response,\n          },\n        });\n      } catch (error) {\n        toast.error('ERROR GETTING CUSTOMER ORDERS' + error)\n        dispatch({\n          type: GET_CUSTOMERORDERS_ERROR,\n        });\n      }\n    },\n    createCustomerOrder: (data) => async(dispatch) => {\n        try {\n            dispatch({\n              type: CREATE_CUSTOMERORDERS_STARTED,\n            });\n            await createCustomerOrder(data);\n            dispatch({\n              type: CREATE_CUSTOMERORDERS_SUCCESS,\n              payload: {\n                message: 'added successfully',\n              }\n            });\n          } catch (err) {\n            dispatch({\n              type: CREATE_CUSTOMERORDERS_ERROR,\n              payload: {\n                message: 'failed to create customer order!',\n              }\n            })\n          }\n    },\n    retrieveUserPriceOrders: (data) => async (dispatch) => {\n        try {\n            dispatch({\n              type: GET_USERPRICEORDERS_STARTED,\n            });\n            let response = await retrieveUserPriceOrders(data)\n            dispatch({\n              type: GET_USERPRICEORDERS_SUCCESS,\n              payload: {\n                data: response,\n              },\n            });\n          } catch (error) {\n            toast.error('ERROR GETTING CUSTOMER ORDERS BY PRICE VALUE' + error)\n            dispatch({\n              type: GET_USERPRICEORDERS_ERROR,\n            });\n          }\n    },\n    deleteOrder: (id) => async (dispatch) => {\n        try {\n          dispatch({\n            type: DELETE_CUSTOMERORDERS_STARTED,\n          });\n          await deleteOrder(id);\n          dispatch({\n            type: DELETE_CUSTOMERORDERS_SUCCESS,\n            payload: {\n              message: 'deleted order successfully',\n            }\n          });\n        } catch (err) {\n          dispatch({\n            type: DELETE_CUSTOMERORDERS_ERROR,\n          })\n        }\n      },\n  };\n  \n  export default customerordersActions;"]},"metadata":{},"sourceType":"module"}