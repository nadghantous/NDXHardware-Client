{"ast":null,"code":"import { retrievePCConfigurations, addPCConfiguration, retrieveGamerPCConfigurations, retrieveNonGamerPCConfigurations } from '../../actions/actions';\nimport { toast } from 'react-toastify';\nexport const GET_PCS_STARTED = 'GET_PCS_STARTED';\nexport const GET_PCS_SUCCESS = 'GET_PCS_SUCCESS';\nexport const GET_PCS_ERROR = 'GET_PCS_ERROR';\nexport const GET_GAMERPCS_STARTED = 'GET_GAMERPCS_STARTED';\nexport const GET_GAMERPCS_SUCCESS = 'GET_GAMERPCS_SUCCESS';\nexport const GET_GAMERPCS_ERROR = 'GET_GAMERPCS_ERROR';\nexport const GET_NONGAMERPCS_STARTED = 'GET_NONGAMERPCS_STARTED';\nexport const GET_NONGAMERPCS_SUCCESS = 'GET_NONGAMERPCS_SUCCESS';\nexport const GET_NONGAMERPCS_ERROR = 'GET_NONGAMERPCS_ERROR';\nexport const ADD_PC_STARTED = 'ADD_PC_STARTED';\nexport const ADD_PC_SUCCESS = 'ADD_PC_SUCCESS';\nexport const ADD_PC_ERROR = 'ADD_PC_ERROR';\nconst pcsActions = {\n  retrievePCConfigurations: data => async dispatch => {\n    try {\n      dispatch({\n        type: GET_PCS_STARTED\n      });\n      let response = await retrievePCConfigurations(data);\n      dispatch({\n        type: GET_PCS_SUCCESS,\n        payload: {\n          data: response\n        }\n      });\n    } catch (error) {\n      toast.error('ERROR GETTING PC CONFIGURATIONS' + error);\n      dispatch({\n        type: GET_PCS_ERROR\n      });\n    }\n  },\n  retrieveGamerPCConfigurations: data => async dispatch => {\n    try {\n      dispatch({\n        type: GET_GAMERPCS_STARTED\n      });\n      let response = await retrieveGamerPCConfigurations(data);\n      dispatch({\n        type: GET_GAMERPCS_SUCCESS,\n        payload: {\n          data: response\n        }\n      });\n    } catch (error) {\n      toast.error('ERROR GETTING GAMER PC CONFIGURATIONS' + error);\n      dispatch({\n        type: GET_GAMERPCS_ERROR\n      });\n    }\n  },\n  retrieveNonGamerPCConfigurations: data => async dispatch => {\n    try {\n      dispatch({\n        type: GET_NONGAMERPCS_STARTED\n      });\n      let response = await retrieveNonGamerPCConfigurations(data);\n      dispatch({\n        type: GET_NONGAMERPCS_SUCCESS,\n        payload: {\n          data: response\n        }\n      });\n    } catch (error) {\n      toast.error('ERROR GETTING NON GAMER PC CONFIGURATIONS' + error);\n      dispatch({\n        type: GET_NONGAMERPCS_ERROR\n      });\n    }\n  },\n  addPCConfiguration: data => async dispatch => {\n    try {\n      dispatch({\n        type: ADD_PC_STARTED\n      });\n      await addPCConfiguration(data);\n      dispatch({\n        type: ADD_PC_SUCCESS,\n        payload: {\n          message: 'PC Added Succesfully !'\n        }\n      });\n      toast.success(\"PC Successfully Added!\");\n    } catch (err) {\n      dispatch({\n        type: ADD_PC_ERROR,\n        payload: {\n          message: 'failed to add PC!'\n        }\n      });\n    }\n  }\n};\nexport default pcsActions;","map":{"version":3,"sources":["/home/nadghantous/Desktop/nadghantousprojects/react/csis-myapp-test/src/redux/actions/desktops.js"],"names":["retrievePCConfigurations","addPCConfiguration","retrieveGamerPCConfigurations","retrieveNonGamerPCConfigurations","toast","GET_PCS_STARTED","GET_PCS_SUCCESS","GET_PCS_ERROR","GET_GAMERPCS_STARTED","GET_GAMERPCS_SUCCESS","GET_GAMERPCS_ERROR","GET_NONGAMERPCS_STARTED","GET_NONGAMERPCS_SUCCESS","GET_NONGAMERPCS_ERROR","ADD_PC_STARTED","ADD_PC_SUCCESS","ADD_PC_ERROR","pcsActions","data","dispatch","type","response","payload","error","message","success","err"],"mappings":"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","sourcesContent":["import { retrievePCConfigurations,addPCConfiguration, retrieveGamerPCConfigurations,retrieveNonGamerPCConfigurations } from '../../actions/actions';\nimport { toast } from 'react-toastify'\n\n\nexport const GET_PCS_STARTED = 'GET_PCS_STARTED'\nexport const GET_PCS_SUCCESS = 'GET_PCS_SUCCESS'\nexport const GET_PCS_ERROR = 'GET_PCS_ERROR'\nexport const GET_GAMERPCS_STARTED = 'GET_GAMERPCS_STARTED'\nexport const GET_GAMERPCS_SUCCESS = 'GET_GAMERPCS_SUCCESS'\nexport const GET_GAMERPCS_ERROR = 'GET_GAMERPCS_ERROR'\nexport const GET_NONGAMERPCS_STARTED = 'GET_NONGAMERPCS_STARTED'\nexport const GET_NONGAMERPCS_SUCCESS = 'GET_NONGAMERPCS_SUCCESS'\nexport const GET_NONGAMERPCS_ERROR = 'GET_NONGAMERPCS_ERROR'\nexport const ADD_PC_STARTED = 'ADD_PC_STARTED'\nexport const ADD_PC_SUCCESS = 'ADD_PC_SUCCESS'\nexport const ADD_PC_ERROR = 'ADD_PC_ERROR'\nconst pcsActions = {\n\n    retrievePCConfigurations: (data) => async (dispatch) => {\n      try {\n        dispatch({\n          type: GET_PCS_STARTED,\n        });\n        let response = await retrievePCConfigurations(data)\n        dispatch({\n          type: GET_PCS_SUCCESS,\n          payload: {\n            data: response,\n          },\n        });\n      } catch (error) {\n        toast.error('ERROR GETTING PC CONFIGURATIONS' + error)\n        dispatch({\n          type: GET_PCS_ERROR,\n        });\n      }\n    },\n    retrieveGamerPCConfigurations: (data) => async (dispatch) => {\n      try {\n        dispatch({\n          type: GET_GAMERPCS_STARTED,\n        });\n        let response = await retrieveGamerPCConfigurations(data)\n        dispatch({\n          type: GET_GAMERPCS_SUCCESS,\n          payload: {\n            data: response,\n          },\n        });\n      } catch (error) {\n        toast.error('ERROR GETTING GAMER PC CONFIGURATIONS' + error)\n        dispatch({\n          type: GET_GAMERPCS_ERROR,\n        });\n      }\n    },\n    retrieveNonGamerPCConfigurations: (data) => async (dispatch) => {\n      try {\n        dispatch({\n          type: GET_NONGAMERPCS_STARTED,\n        });\n        let response = await retrieveNonGamerPCConfigurations(data)\n        dispatch({\n          type: GET_NONGAMERPCS_SUCCESS,\n          payload: {\n            data: response,\n          },\n        });\n      } catch (error) {\n        toast.error('ERROR GETTING NON GAMER PC CONFIGURATIONS' + error)\n        dispatch({\n          type: GET_NONGAMERPCS_ERROR,\n        });\n      }\n    },\n    addPCConfiguration: (data) => async (dispatch) => {\n      try {\n        dispatch({\n          type: ADD_PC_STARTED,\n        });\n        await addPCConfiguration(data);\n        dispatch({\n          type: ADD_PC_SUCCESS,\n          payload: {\n            message: 'PC Added Succesfully !',\n          }\n        });\n        toast.success(\"PC Successfully Added!\");\n      } catch (err) {\n        dispatch({\n          type: ADD_PC_ERROR,\n          payload: {\n            message: 'failed to add PC!',\n          }\n        })\n       \n      }\n    }\n  };\n  \n  export default pcsActions;"]},"metadata":{},"sourceType":"module"}