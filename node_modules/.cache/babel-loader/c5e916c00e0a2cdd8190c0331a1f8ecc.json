{"ast":null,"code":"import { retrieveUsers, createUser, findUser } from '../../actions/actions';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nexport const GET_USERS_STARTED = 'GET_USERS_STARTED';\nexport const GET_USERS_SUCCESS = 'GET_USERS_SUCCESS';\nexport const GET_USERS_ERROR = 'GET_USERS_ERROR';\nexport const CREATE_USER_STARTED = 'CREATE_USER_STARTED';\nexport const CREATE_USER_SUCCESS = 'CREATE_USER_SUCCESS';\nexport const CREATE_USER_ERROR = 'CREATE_USER_ERROR';\nexport const GET_USER_STARTED = 'GET_USER_STARTED';\nexport const GET_USER_SUCCESS = 'GET_USER_SUCCESS';\nexport const GET_USER_ERROR = 'GET_USER_ERROR';\ntoast.configure();\nconst usersActions = {\n  retrieveUsers: () => async dispatch => {\n    try {\n      dispatch({\n        type: GET_USERS_STARTED\n      });\n      let response = await retrieveUsers();\n      dispatch({\n        type: GET_USERS_SUCCESS,\n        payload: {\n          data: response\n        }\n      });\n    } catch (error) {\n      toast.error('ERROR GETTING USERS' + error);\n      dispatch({\n        type: GET_USERS_ERROR\n      });\n    }\n  },\n  createUser: data => async dispatch => {\n    try {\n      dispatch({\n        type: CREATE_USER_STARTED\n      });\n      await createUser(data);\n      dispatch({\n        type: CREATE_USER_SUCCESS,\n        payload: {\n          message: 'Account Created Succesfully !'\n        }\n      });\n      toast.success(\"Account Successfully Created!\");\n    } catch (err) {\n      dispatch({\n        type: CREATE_USER_ERROR,\n        payload: {\n          message: 'failed to create account!'\n        }\n      });\n    }\n  },\n  getUser: data => async dispatch => {\n    try {\n      dispatch({\n        type: GET_USER_STARTED\n      });\n      await findUser(data);\n      dispatch({\n        type: GET_USER_SUCCESS,\n        payload: {\n          message: 'User Found !'\n        }\n      });\n      toast.success(\"User Found!\");\n    } catch (err) {\n      dispatch({\n        type: GET_USER_ERROR,\n        payload: {\n          message: 'failed to find user!'\n        }\n      });\n    }\n  }\n};\nexport default usersActions;","map":{"version":3,"sources":["/home/nadghantous/Desktop/nadghantousprojects/react/csis-myapp-test/src/redux/actions/users.js"],"names":["retrieveUsers","createUser","findUser","toast","GET_USERS_STARTED","GET_USERS_SUCCESS","GET_USERS_ERROR","CREATE_USER_STARTED","CREATE_USER_SUCCESS","CREATE_USER_ERROR","GET_USER_STARTED","GET_USER_SUCCESS","GET_USER_ERROR","configure","usersActions","dispatch","type","response","payload","data","error","message","success","err","getUser"],"mappings":"AAAA,SAASA,aAAT,EAAuBC,UAAvB,EAAkCC,QAAlC,QAAiD,uBAAjD;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,OAAO,uCAAP;AACA,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AAEP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AAEP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,cAAc,GAAG,gBAAvB;AAEPT,KAAK,CAACU,SAAN;AAEA,MAAMC,YAAY,GAAG;AAEnBd,EAAAA,aAAa,EAAE,MAAM,MAAOe,QAAP,IAAoB;AACvC,QAAI;AACFA,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEZ;AADC,OAAD,CAAR;AAGA,UAAIa,QAAQ,GAAG,MAAMjB,aAAa,EAAlC;AACAe,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEX,iBADC;AAEPa,QAAAA,OAAO,EAAE;AACPC,UAAAA,IAAI,EAAEF;AADC;AAFF,OAAD,CAAR;AAMD,KAXD,CAWE,OAAOG,KAAP,EAAc;AACdjB,MAAAA,KAAK,CAACiB,KAAN,CAAY,wBAAwBA,KAApC;AACAL,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEV;AADC,OAAD,CAAR;AAGD;AACF,GApBkB;AAqBnBL,EAAAA,UAAU,EAAGkB,IAAD,IAAU,MAAOJ,QAAP,IAAoB;AACxC,QAAI;AACFA,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAET;AADC,OAAD,CAAR;AAGA,YAAMN,UAAU,CAACkB,IAAD,CAAhB;AACAJ,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAER,mBADC;AAEPU,QAAAA,OAAO,EAAE;AACPG,UAAAA,OAAO,EAAE;AADF;AAFF,OAAD,CAAR;AAMAlB,MAAAA,KAAK,CAACmB,OAAN,CAAc,+BAAd;AACD,KAZD,CAYE,OAAOC,GAAP,EAAY;AACZR,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEP,iBADC;AAEPS,QAAAA,OAAO,EAAE;AACPG,UAAAA,OAAO,EAAE;AADF;AAFF,OAAD,CAAR;AAOD;AACF,GA3CkB;AA4CnBG,EAAAA,OAAO,EAAGL,IAAD,IAAU,MAAOJ,QAAP,IAAoB;AACrC,QAAI;AACFA,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEN;AADC,OAAD,CAAR;AAGA,YAAMR,QAAQ,CAACiB,IAAD,CAAd;AACAJ,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEL,gBADC;AAEPO,QAAAA,OAAO,EAAE;AACPG,UAAAA,OAAO,EAAE;AADF;AAFF,OAAD,CAAR;AAMAlB,MAAAA,KAAK,CAACmB,OAAN,CAAc,aAAd;AACD,KAZD,CAYE,OAAOC,GAAP,EAAY;AACZR,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEJ,cADC;AAEPM,QAAAA,OAAO,EAAE;AACPG,UAAAA,OAAO,EAAE;AADF;AAFF,OAAD,CAAR;AAOD;AACF;AAlEkB,CAArB;AAqEA,eAAeP,YAAf","sourcesContent":["import { retrieveUsers,createUser,findUser} from '../../actions/actions';\nimport { toast } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css';\nexport const GET_USERS_STARTED = 'GET_USERS_STARTED'\nexport const GET_USERS_SUCCESS = 'GET_USERS_SUCCESS'\nexport const GET_USERS_ERROR = 'GET_USERS_ERROR'\n\nexport const CREATE_USER_STARTED = 'CREATE_USER_STARTED'\nexport const CREATE_USER_SUCCESS = 'CREATE_USER_SUCCESS'\nexport const CREATE_USER_ERROR = 'CREATE_USER_ERROR'\n\nexport const GET_USER_STARTED = 'GET_USER_STARTED'\nexport const GET_USER_SUCCESS = 'GET_USER_SUCCESS'\nexport const GET_USER_ERROR = 'GET_USER_ERROR'\n\ntoast.configure();\n\nconst usersActions = {\n\n  retrieveUsers: () => async (dispatch) => {\n    try {\n      dispatch({\n        type: GET_USERS_STARTED,\n      });\n      let response = await retrieveUsers()\n      dispatch({\n        type: GET_USERS_SUCCESS,\n        payload: {\n          data: response,\n        },\n      });\n    } catch (error) {\n      toast.error('ERROR GETTING USERS' + error)\n      dispatch({\n        type: GET_USERS_ERROR,\n      });\n    }\n  },\n  createUser: (data) => async (dispatch) => {\n    try {\n      dispatch({\n        type: CREATE_USER_STARTED,\n      });\n      await createUser(data);\n      dispatch({\n        type: CREATE_USER_SUCCESS,\n        payload: {\n          message: 'Account Created Succesfully !',\n        }\n      });\n      toast.success(\"Account Successfully Created!\");\n    } catch (err) {\n      dispatch({\n        type: CREATE_USER_ERROR,\n        payload: {\n          message: 'failed to create account!',\n        }\n      })\n     \n    }\n  },\n  getUser: (data) => async (dispatch) => {\n    try {\n      dispatch({\n        type: GET_USER_STARTED,\n      });\n      await findUser(data);\n      dispatch({\n        type: GET_USER_SUCCESS,\n        payload: {\n          message: 'User Found !',\n        }\n      });\n      toast.success(\"User Found!\");\n    } catch (err) {\n      dispatch({\n        type: GET_USER_ERROR,\n        payload: {\n          message: 'failed to find user!',\n        }\n      })\n     \n    }\n  }\n};\n\nexport default usersActions;"]},"metadata":{},"sourceType":"module"}