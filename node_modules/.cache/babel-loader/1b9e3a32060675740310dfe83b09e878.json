{"ast":null,"code":"var _jsxFileName = \"/home/nadghantous/Desktop/nadghantousprojects/react/csis-myapp-test/src/components/NDXSoftwareDropDown.js\";\nimport React, { Component } from 'react';\nimport { retrievePCConfigurations } from '../actions/actions';\nimport '../App.css';\nimport { Link } from 'react-router-dom';\nimport pcsActions from '../redux/actions/desktops';\nimport cpusActions from '../redux/actions/processors';\nimport gpusActions from '../redux/actions/graphicscards';\nimport ramsActions from '../redux/actions/rams';\nimport storagesActions from '../redux/actions/storages';\nimport motherboardsActions from '../redux/actions/motherboards';\nimport psusActions from '../redux/actions/powersupplies';\nimport { connect } from 'react-redux';\nimport continentsActions from '../redux/actions/continents';\n\nclass NDXSoftwareDropDown extends Component {\n  constructor() {\n    super();\n\n    this.handleChange = event => {\n      if (this.props.collectionName === \"processor\") {\n        console.log(event.target.value);\n        this.setState({\n          CPU: event.target.value\n        });\n        console.log(this.state.CPU);\n        this.props.history.push(\"/addpcconfigurations\", {\n          CPU: this.state.CPU\n        });\n      }\n    };\n\n    this.state = {\n      DropDownComp: [],\n      CPU: '',\n      GPU: '',\n      RAM: '',\n      Storage: '',\n      Motherboard: '',\n      PSU: '',\n      totalprice: ''\n    };\n  }\n\n  componentDidMount() {\n    this.loadInfo();\n  }\n\n  async loadInfo() {\n    if (this.props.collectionName === \"continents\") {\n      let response = await this.props.dispatch(continentsActions.retrieveContinents());\n      this.setState({\n        response\n      });\n      let data_array = this.props.continents;\n      let DropDownComp = [];\n      console.log(data_array);\n\n      for (let i = 0; i < data_array.length; i++) {\n        let item = data_array[i];\n        DropDownComp.push( /*#__PURE__*/React.createElement(\"option\", {\n          style: {\n            backgroundColor: 'black',\n            color: '#0eff00'\n          },\n          key: i,\n          value: item.id,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 35\n          }\n        }, item.name));\n      }\n\n      this.setState({\n        DropDownComp: DropDownComp\n      });\n    } else if (this.props.collectionName === \"processor\") {\n      let data_array = this.props.data;\n      let DropDownComp = [];\n      console.log(data_array);\n\n      for (let i = 0; i < data_array.length; i++) {\n        let item = data_array[i];\n\n        if (i === 0) {\n          this.setState({\n            CPU: item.Proc_Name + \" \" + item.Proc_Freq\n          });\n        }\n\n        DropDownComp.push( /*#__PURE__*/React.createElement(\"option\", {\n          style: {\n            backgroundColor: 'black',\n            color: '#0eff00'\n          },\n          key: i,\n          value: item.Proc_Name + \" \" + item.Proc_Freq,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 35\n          }\n        }, item.Proc_Name, \"  \", item.Proc_Freq, \"  $\", item.Price));\n      }\n\n      this.setState({\n        DropDownComp: DropDownComp\n      });\n    } else if (this.props.collectionName === \"graphics_card\") {\n      let data_array = this.props.data;\n      let DropDownComp = [];\n      console.log(data_array);\n\n      for (let i = 0; i < data_array.length; i++) {\n        let item = data_array[i];\n        DropDownComp.push( /*#__PURE__*/React.createElement(\"option\", {\n          style: {\n            backgroundColor: 'black',\n            color: '#0eff00'\n          },\n          key: i,\n          value: item.Grap_Name + item.Grap_Memory,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 35\n          }\n        }, item.Grap_Name, \"  \", item.Grap_Memory, \"  $\", item.Price));\n      }\n\n      this.setState({\n        DropDownComp: DropDownComp\n      });\n    } else if (this.props.collectionName === \"memory\") {\n      let data_array = this.props.data;\n      let DropDownComp = [];\n      console.log(data_array);\n\n      for (let i = 0; i < data_array.length; i++) {\n        let item = data_array[i];\n        DropDownComp.push( /*#__PURE__*/React.createElement(\"option\", {\n          style: {\n            backgroundColor: 'black',\n            color: '#0eff00'\n          },\n          key: i,\n          value: item.RAM_Name + item.RAM_Storage,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 35\n          }\n        }, item.RAM_Name, \"  \", item.RAM_Storage, \"  $\", item.Price));\n      }\n\n      this.setState({\n        DropDownComp: DropDownComp\n      });\n    } else if (this.props.collectionName === \"storage\") {\n      let data_array = this.props.data;\n      let DropDownComp = [];\n      console.log(data_array);\n\n      for (let i = 0; i < data_array.length; i++) {\n        let item = data_array[i];\n        DropDownComp.push( /*#__PURE__*/React.createElement(\"option\", {\n          style: {\n            backgroundColor: 'black',\n            color: '#0eff00'\n          },\n          key: i,\n          value: item.Stor_Name + item.Stor_Capacity,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 35\n          }\n        }, item.Stor_Name, \"  \", item.Stor_Capacity, \"  $\", item.Price));\n      }\n\n      this.setState({\n        DropDownComp: DropDownComp\n      });\n    } else if (this.props.collectionName === \"motherboard\") {\n      let data_array = this.props.data;\n      let DropDownComp = [];\n      console.log(data_array);\n\n      for (let i = 0; i < data_array.length; i++) {\n        let item = data_array[i];\n        DropDownComp.push( /*#__PURE__*/React.createElement(\"option\", {\n          style: {\n            backgroundColor: 'black',\n            color: '#0eff00'\n          },\n          key: i,\n          value: item.Moth_Name,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 35\n          }\n        }, item.Moth_Name, \"  $\", item.Price));\n      }\n\n      this.setState({\n        DropDownComp: DropDownComp\n      });\n    } else if (this.props.collectionName === \"power_supply\") {\n      let data_array = this.props.data;\n      let DropDownComp = [];\n      console.log(data_array);\n\n      for (let i = 0; i < data_array.length; i++) {\n        let item = data_array[i];\n        DropDownComp.push( /*#__PURE__*/React.createElement(\"option\", {\n          style: {\n            backgroundColor: 'black',\n            color: '#0eff00'\n          },\n          key: i,\n          value: item.Pow_Name + item.Pow_Capacity,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 35\n          }\n        }, item.Pow_Name, \"  \", item.Pow_Capacity, \"  $\", item.Price));\n      }\n\n      this.setState({\n        DropDownComp: DropDownComp\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"select\", {\n      onChange: this.handleChange,\n      style: {\n        backgroundColor: '#0eff00',\n        color: 'black'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }\n    }, this.state.DropDownComp));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  continents: state.continentReducer.continents,\n  processors: state.cpuReducer.processors,\n  graphicscards: state.gpuReducer.graphicscards,\n  rams: state.ramReducer.rams,\n  storages: state.storageReducer.storages,\n  motherboards: state.motherboardReducer.motherboards,\n  psus: state.psuReducer.psus\n});\n\nexport default connect(mapStateToProps)(NDXSoftwareDropDown);","map":{"version":3,"sources":["/home/nadghantous/Desktop/nadghantousprojects/react/csis-myapp-test/src/components/NDXSoftwareDropDown.js"],"names":["React","Component","retrievePCConfigurations","Link","pcsActions","cpusActions","gpusActions","ramsActions","storagesActions","motherboardsActions","psusActions","connect","continentsActions","NDXSoftwareDropDown","constructor","handleChange","event","props","collectionName","console","log","target","value","setState","CPU","state","history","push","DropDownComp","GPU","RAM","Storage","Motherboard","PSU","totalprice","componentDidMount","loadInfo","response","dispatch","retrieveContinents","data_array","continents","i","length","item","backgroundColor","color","id","name","data","Proc_Name","Proc_Freq","Price","Grap_Name","Grap_Memory","RAM_Name","RAM_Storage","Stor_Name","Stor_Capacity","Moth_Name","Pow_Name","Pow_Capacity","render","mapStateToProps","continentReducer","processors","cpuReducer","graphicscards","gpuReducer","rams","ramReducer","storages","storageReducer","motherboards","motherboardReducer","psus","psuReducer"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {retrievePCConfigurations} from '../actions/actions';\nimport '../App.css';\nimport {Link} from  'react-router-dom';\nimport pcsActions  from '../redux/actions/desktops';\nimport cpusActions from '../redux/actions/processors';\nimport gpusActions from '../redux/actions/graphicscards';\nimport ramsActions from '../redux/actions/rams';\nimport storagesActions from '../redux/actions/storages';\nimport motherboardsActions from '../redux/actions/motherboards';\nimport psusActions from '../redux/actions/powersupplies';\nimport { connect } from 'react-redux';\nimport continentsActions from '../redux/actions/continents';\nclass NDXSoftwareDropDown extends Component{\n    constructor(){\n        super();\n        this.state = {\n            DropDownComp:[],\n            CPU:'',\n            GPU:'',\n            RAM:'',\n            Storage:'',\n            Motherboard:'',\n            PSU:'',\n            totalprice:''\n        }\n\n    }\n    componentDidMount(){\n        \n        this.loadInfo();\n    }\n    async loadInfo () {\n        if(this.props.collectionName === \"continents\"){\n            let response = await this.props.dispatch(continentsActions.retrieveContinents());\n        this.setState({response});\n            let data_array = this.props.continents;\n            let DropDownComp = [];\n            console.log(data_array)\n            for(let i = 0; i < data_array.length; i++){\n                let item = data_array[i];\n                DropDownComp.push(<option style={{backgroundColor:'black',color:'#0eff00'}} key={i} value={item.id}>{item.name}</option>);\n    \n            }\n            this.setState({DropDownComp:DropDownComp});\n        }\n        else if(this.props.collectionName === \"processor\"){\n            let data_array = this.props.data;\n            let DropDownComp = [];\n            console.log(data_array)\n            for(let i = 0; i < data_array.length; i++){\n                let item = data_array[i];\n                if(i === 0){\n                    this.setState({CPU: item.Proc_Name + \" \"+ item.Proc_Freq});\n                }\n                DropDownComp.push(<option style={{backgroundColor:'black',color:'#0eff00'}} key={i} value={item.Proc_Name + \" \"+ item.Proc_Freq}>{item.Proc_Name}  {item.Proc_Freq}  ${item.Price}</option>);\n    \n            }\n            this.setState({DropDownComp:DropDownComp});\n        }\n        else if(this.props.collectionName === \"graphics_card\"){\n            let data_array = this.props.data;\n            let DropDownComp = [];\n            console.log(data_array)\n            for(let i = 0; i < data_array.length; i++){\n                let item = data_array[i];\n                DropDownComp.push(<option style={{backgroundColor:'black',color:'#0eff00'}} key={i} value={item.Grap_Name + item.Grap_Memory}>{item.Grap_Name}  {item.Grap_Memory}  ${item.Price}</option>);\n    \n            }\n            this.setState({DropDownComp:DropDownComp});\n        }\n        else if(this.props.collectionName === \"memory\"){\n            let data_array = this.props.data;\n            let DropDownComp = [];\n            console.log(data_array)\n            for(let i = 0; i < data_array.length; i++){\n                let item = data_array[i];\n                DropDownComp.push(<option style={{backgroundColor:'black',color:'#0eff00'}} key={i} value={item.RAM_Name + item.RAM_Storage}>{item.RAM_Name}  {item.RAM_Storage}  ${item.Price}</option>);\n    \n            }\n            this.setState({DropDownComp:DropDownComp});\n        }\n        else if(this.props.collectionName === \"storage\"){\n            let data_array = this.props.data;\n            let DropDownComp = [];\n            console.log(data_array)\n            for(let i = 0; i < data_array.length; i++){\n                let item = data_array[i];\n                DropDownComp.push(<option style={{backgroundColor:'black',color:'#0eff00'}} key={i} value={item.Stor_Name + item.Stor_Capacity}>{item.Stor_Name}  {item.Stor_Capacity}  ${item.Price}</option>);\n    \n            }\n            this.setState({DropDownComp:DropDownComp});\n        }\n        else if(this.props.collectionName === \"motherboard\"){\n            let data_array = this.props.data;\n            let DropDownComp = [];\n            console.log(data_array)\n            for(let i = 0; i < data_array.length; i++){\n                let item = data_array[i];\n                DropDownComp.push(<option style={{backgroundColor:'black',color:'#0eff00'}} key={i} value={item.Moth_Name}>{item.Moth_Name}  ${item.Price}</option>);\n    \n            }\n            this.setState({DropDownComp:DropDownComp});\n        }\n        else if(this.props.collectionName === \"power_supply\"){\n            let data_array = this.props.data;\n            let DropDownComp = [];\n            console.log(data_array)\n            for(let i = 0; i < data_array.length; i++){\n                let item = data_array[i];\n                DropDownComp.push(<option style={{backgroundColor:'black',color:'#0eff00'}} key={i} value={item.Pow_Name + item.Pow_Capacity}>{item.Pow_Name}  {item.Pow_Capacity}  ${item.Price}</option>);\n    \n            }\n            this.setState({DropDownComp:DropDownComp});\n        }\n\n        \n    }\n    handleChange = (event) => {\n        if(this.props.collectionName === \"processor\"){\n            console.log(event.target.value);\n            this.setState({CPU: event.target.value});\n            console.log(this.state.CPU);\n            this.props.history.push(\"/addpcconfigurations\",{\n                CPU: this.state.CPU\n            })\n        }\n        \n      };\n\n    render(){\n\n        return(\n        <div className=\"form-group\">\n        <select onChange={this.handleChange} style={{backgroundColor:'#0eff00',color:'black'}}>{this.state.DropDownComp}</select>\n        </div>\n        );\n    }\n}\nconst mapStateToProps = state =>({\n    continents: state.continentReducer.continents,\n    processors: state.cpuReducer.processors,\n    graphicscards: state.gpuReducer.graphicscards,\n    rams: state.ramReducer.rams,\n    storages: state.storageReducer.storages,\n    motherboards: state.motherboardReducer.motherboards,\n    psus: state.psuReducer.psus,\n  })\n  \n  export default connect(mapStateToProps)(NDXSoftwareDropDown);\n"]},"metadata":{},"sourceType":"module"}