{"ast":null,"code":"import { retrieveStorages, addStorage } from '../../actions/actions';\nimport { toast } from 'react-toastify';\nexport const GET_STORAGES_STARTED = 'GET_STORAGES_STARTED';\nexport const GET_STORAGES_SUCCESS = 'GET_STORAGES_SUCCESS';\nexport const GET_STORAGES_ERROR = 'GET_STORAGES_ERROR';\nexport const ADD_STORAGE_STARTED = 'ADD_STORAGE_STARTED';\nexport const ADD_STORAGE_SUCCESS = 'ADD_STORAGE_SUCCESS';\nexport const ADD_STORAGE_ERROR = 'ADD_STORAGE_ERROR';\nconst storagesActions = {\n  retrieveStorages: () => async dispatch => {\n    try {\n      dispatch({\n        type: GET_STORAGES_STARTED\n      });\n      let response = await retrieveStorages();\n      dispatch({\n        type: GET_STORAGES_SUCCESS,\n        payload: {\n          data: response\n        }\n      });\n    } catch (error) {\n      toast.error('ERROR GETTING STORAGES' + error);\n      dispatch({\n        type: GET_STORAGES_ERROR\n      });\n    }\n  },\n  addStorage: data => async dispatch => {\n    try {\n      dispatch({\n        type: ADD_STORAGE_STARTED\n      });\n      await addStorage(data);\n      dispatch({\n        type: ADD_STORAGE_SUCCESS,\n        payload: {\n          message: 'Storage Added Succesfully !'\n        }\n      });\n      toast.success(\"Storage Successfully Added!\");\n    } catch (err) {\n      dispatch({\n        type: ADD_STORAGE_ERROR,\n        payload: {\n          message: 'failed to add Storage!'\n        }\n      });\n    }\n  }\n};\nexport default storagesActions;","map":{"version":3,"sources":["/home/nadghantous/Desktop/nadghantousprojects/react/csis-myapp-test/src/redux/actions/storages.js"],"names":["retrieveStorages","addStorage","toast","GET_STORAGES_STARTED","GET_STORAGES_SUCCESS","GET_STORAGES_ERROR","ADD_STORAGE_STARTED","ADD_STORAGE_SUCCESS","ADD_STORAGE_ERROR","storagesActions","dispatch","type","response","payload","data","error","message","success","err"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,UAA3B,QAA6C,uBAA7C;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAGA,OAAO,MAAMC,oBAAoB,GAAG,sBAA7B;AACP,OAAO,MAAMC,oBAAoB,GAAG,sBAA7B;AACP,OAAO,MAAMC,kBAAkB,GAAG,oBAA3B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AAEP,MAAMC,eAAe,GAAG;AAEpBT,EAAAA,gBAAgB,EAAE,MAAM,MAAOU,QAAP,IAAoB;AAC1C,QAAI;AACFA,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAER;AADC,OAAD,CAAR;AAGA,UAAIS,QAAQ,GAAG,MAAMZ,gBAAgB,EAArC;AACAU,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEP,oBADC;AAEPS,QAAAA,OAAO,EAAE;AACPC,UAAAA,IAAI,EAAEF;AADC;AAFF,OAAD,CAAR;AAMD,KAXD,CAWE,OAAOG,KAAP,EAAc;AACdb,MAAAA,KAAK,CAACa,KAAN,CAAY,2BAA2BA,KAAvC;AACAL,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEN;AADC,OAAD,CAAR;AAGD;AACF,GApBmB;AAqBpBJ,EAAAA,UAAU,EAAGa,IAAD,IAAU,MAAOJ,QAAP,IAAoB;AACxC,QAAI;AACFA,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEL;AADC,OAAD,CAAR;AAGA,YAAML,UAAU,CAACa,IAAD,CAAhB;AACAJ,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEJ,mBADC;AAEPM,QAAAA,OAAO,EAAE;AACPG,UAAAA,OAAO,EAAE;AADF;AAFF,OAAD,CAAR;AAMAd,MAAAA,KAAK,CAACe,OAAN,CAAc,6BAAd;AACD,KAZD,CAYE,OAAOC,GAAP,EAAY;AACZR,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEH,iBADC;AAEPK,QAAAA,OAAO,EAAE;AACPG,UAAAA,OAAO,EAAE;AADF;AAFF,OAAD,CAAR;AAOD;AACF;AA3CmB,CAAxB;AA8CE,eAAeP,eAAf","sourcesContent":["import { retrieveStorages, addStorage } from '../../actions/actions';\nimport { toast } from 'react-toastify'\n\n\nexport const GET_STORAGES_STARTED = 'GET_STORAGES_STARTED'\nexport const GET_STORAGES_SUCCESS = 'GET_STORAGES_SUCCESS'\nexport const GET_STORAGES_ERROR = 'GET_STORAGES_ERROR'\nexport const ADD_STORAGE_STARTED = 'ADD_STORAGE_STARTED'\nexport const ADD_STORAGE_SUCCESS = 'ADD_STORAGE_SUCCESS'\nexport const ADD_STORAGE_ERROR = 'ADD_STORAGE_ERROR'\n\nconst storagesActions = {\n\n    retrieveStorages: () => async (dispatch) => {\n      try {\n        dispatch({\n          type: GET_STORAGES_STARTED,\n        });\n        let response = await retrieveStorages()\n        dispatch({\n          type: GET_STORAGES_SUCCESS,\n          payload: {\n            data: response,\n          },\n        });\n      } catch (error) {\n        toast.error('ERROR GETTING STORAGES' + error)\n        dispatch({\n          type: GET_STORAGES_ERROR,\n        });\n      }\n    },\n    addStorage: (data) => async (dispatch) => {\n      try {\n        dispatch({\n          type: ADD_STORAGE_STARTED,\n        });\n        await addStorage(data);\n        dispatch({\n          type: ADD_STORAGE_SUCCESS,\n          payload: {\n            message: 'Storage Added Succesfully !',\n          }\n        });\n        toast.success(\"Storage Successfully Added!\");\n      } catch (err) {\n        dispatch({\n          type: ADD_STORAGE_ERROR,\n          payload: {\n            message: 'failed to add Storage!',\n          }\n        })\n       \n      }\n    }\n  };\n  \n  export default storagesActions;"]},"metadata":{},"sourceType":"module"}