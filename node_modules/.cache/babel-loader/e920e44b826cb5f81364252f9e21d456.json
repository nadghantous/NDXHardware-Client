{"ast":null,"code":"var _jsxFileName = \"/home/nadghantous/Desktop/nadghantousprojects/react/csis-myapp-test/src/components/NDXSoftwareDropDown.js\";\nimport React, { Component } from 'react';\nimport { retrievePCConfigurations } from '../actions/actions';\nimport '../App.css';\nimport { Link } from 'react-router-dom';\nimport pcsActions from '../redux/actions/desktops';\nimport cpusActions from '../redux/actions/processors';\nimport gpusActions from '../redux/actions/graphicscards';\nimport ramsActions from '../redux/actions/rams';\nimport storagesActions from '../redux/actions/storages';\nimport motherboardsActions from '../redux/actions/motherboards';\nimport psusActions from '../redux/actions/powersupplies';\nimport { connect } from 'react-redux';\nimport continentsActions from '../redux/actions/continents';\n\nclass NDXSoftwareDropDown extends Component {\n  constructor() {\n    super();\n\n    this.handleChange = event => {\n      if (this.props.collectionName === \"processor\") {\n        const currentIndex = event.target.options.selectedIndex;\n        let CPU = this.state.DropDownComp[currentIndex].props.value;\n        let cpuprice = this.state.DropDownComp[currentIndex].props.pricevalue;\n        console.log(CPU);\n        console.log(cpuprice);\n        this.setState({\n          CPU: CPU,\n          cpuprice: cpuprice\n        });\n      }\n\n      if (this.props.collectionName === \"graphics_card\") {\n        const currentIndex = event.target.options.selectedIndex;\n        let GPU = this.state.DropDownComp[currentIndex].props.value;\n        let gpuprice = this.state.DropDownComp[currentIndex].props.pricevalue;\n        console.log(GPU);\n        console.log(gpuprice);\n        this.setState({\n          GPU: GPU,\n          gpuprice: gpuprice\n        });\n      }\n\n      if (this.props.collectionName === \"memory\") {\n        this.RAM = event.target.value;\n        const currentIndex = event.target.options.selectedIndex;\n        this.ramprice = this.state.DropDownComp[currentIndex].props.pricevalue;\n        console.log(this.RAM);\n        console.log(this.ramprice);\n      }\n\n      if (this.props.collectionName === \"storage\") {\n        this.Storage = event.target.value;\n        const currentIndex = event.target.options.selectedIndex;\n        this.storageprice = this.state.DropDownComp[currentIndex].props.pricevalue;\n        console.log(this.Storage);\n        console.log(this.storageprice);\n      }\n\n      if (this.props.collectionName === \"motherboard\") {\n        this.Motherboard = event.target.value;\n        const currentIndex = event.target.options.selectedIndex;\n        this.mothprice = this.state.DropDownComp[currentIndex].props.pricevalue;\n        console.log(this.Motherboard);\n        console.log(this.mothprice);\n      }\n\n      if (this.props.collectionName === \"power_supply\") {\n        this.PSU = event.target.value;\n        const currentIndex = event.target.options.selectedIndex;\n        this.psuprice = this.state.DropDownComp[currentIndex].props.pricevalue;\n        console.log(this.PSU);\n        console.log(this.psuprice);\n      }\n\n      console.log(this.state.CPU);\n      console.log(this.state.GPU);\n      this.props.history.push(\"/addpcconfigurations\", {\n        CPU: this.state.CPU,\n        CPUPrice: this.state.cpuprice,\n        GPU: this.state.GPU,\n        GPUPrice: this.state.gpuprice,\n        RAM: this.state.RAM,\n        RAMPrice: this.state.ramprice,\n        Storage: this.state.Storage,\n        StoragePrice: this.state.storageprice,\n        Motherboard: this.state.Motherboard,\n        MotherboardPrice: this.state.mothprice,\n        PSU: this.state.PSU,\n        PSUPrice: this.state.psuprice\n      });\n    };\n\n    this.state = {\n      DropDownComp: [],\n      CPU: '',\n      cpuprice: 0,\n      GPU: '',\n      gpuprice: 0,\n      RAM: '',\n      ramprice: 0,\n      Storage: '',\n      storageprice: 0,\n      Motherboard: '',\n      mothprice: 0,\n      PSU: '',\n      psuprice: 0\n    };\n  }\n\n  componentDidMount() {\n    this.loadInfo();\n  }\n\n  async loadInfo() {\n    if (this.props.collectionName === \"continents\") {\n      let response = await this.props.dispatch(continentsActions.retrieveContinents());\n      this.setState({\n        response\n      });\n      let data_array = this.props.continents;\n      let DropDownComp = [];\n      console.log(data_array);\n\n      for (let i = 0; i < data_array.length; i++) {\n        let item = data_array[i];\n        DropDownComp.push( /*#__PURE__*/React.createElement(\"option\", {\n          style: {\n            backgroundColor: 'black',\n            color: '#0eff00'\n          },\n          key: i,\n          value: item.id,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 35\n          }\n        }, item.name));\n      }\n\n      this.setState({\n        DropDownComp: DropDownComp\n      });\n    } else if (this.props.collectionName === \"processor\") {\n      let response = await this.props.dispatch(cpusActions.retrieveCPUS());\n      this.setState({\n        response\n      });\n      let data_array = this.props.processors;\n      let DropDownComp = [];\n      console.log(data_array);\n\n      for (let i = 0; i < data_array.length; i++) {\n        let item = data_array[i];\n\n        if (i === 0) {\n          this.setState({\n            CPU: item.Proc_Name + \" \" + item.Proc_Freq,\n            cpuprice: item.Price\n          });\n        }\n\n        DropDownComp.push( /*#__PURE__*/React.createElement(\"option\", {\n          style: {\n            backgroundColor: 'black',\n            color: '#0eff00'\n          },\n          key: i,\n          value: item.Proc_Name + \" \" + item.Proc_Freq,\n          pricevalue: item.Price,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 35\n          }\n        }, item.Proc_Name, \"  \", item.Proc_Freq, \"  $\", item.Price));\n      }\n\n      this.setState({\n        DropDownComp: DropDownComp\n      });\n    } else if (this.props.collectionName === \"graphics_card\") {\n      let response = await this.props.dispatch(gpusActions.retrieveGPUS());\n      this.setState({\n        response\n      });\n      let data_array = this.props.graphicscards;\n      let DropDownComp = [];\n      console.log(data_array);\n\n      for (let i = 0; i < data_array.length; i++) {\n        let item = data_array[i];\n\n        if (i === 0) {\n          this.setState({\n            GPU: item.Grap_Name + \" \" + item.Grap_Memory,\n            gpuprice: item.Price\n          });\n        }\n\n        DropDownComp.push( /*#__PURE__*/React.createElement(\"option\", {\n          style: {\n            backgroundColor: 'black',\n            color: '#0eff00'\n          },\n          key: i,\n          pricevalue: item.Price,\n          value: item.Grap_Name + \" \" + item.Grap_Memory,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 35\n          }\n        }, item.Grap_Name, \"  \", item.Grap_Memory, \"  $\", item.Price));\n      }\n\n      this.setState({\n        DropDownComp: DropDownComp\n      });\n    } else if (this.props.collectionName === \"memory\") {\n      let response = await this.props.dispatch(ramsActions.retrieveRAMS());\n      this.setState({\n        response\n      });\n      let data_array = this.props.rams;\n      let DropDownComp = [];\n      console.log(data_array);\n\n      for (let i = 0; i < data_array.length; i++) {\n        let item = data_array[i];\n\n        if (i === 0) {\n          this.setState({\n            RAM: item.RAM_Name + \" \" + item.RAM_Storage,\n            ramprice: item.Price\n          });\n        }\n\n        DropDownComp.push( /*#__PURE__*/React.createElement(\"option\", {\n          style: {\n            backgroundColor: 'black',\n            color: '#0eff00'\n          },\n          key: i,\n          pricevalue: item.Price,\n          value: item.RAM_Name + \" \" + item.RAM_Storage,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 35\n          }\n        }, item.RAM_Name, \"  \", item.RAM_Storage, \"  $\", item.Price));\n      }\n\n      this.setState({\n        DropDownComp: DropDownComp\n      });\n    } else if (this.props.collectionName === \"storage\") {\n      let response = await this.props.dispatch(storagesActions.retrieveStorages());\n      this.setState({\n        response\n      });\n      let data_array = this.props.storages;\n      let DropDownComp = [];\n      console.log(data_array);\n\n      for (let i = 0; i < data_array.length; i++) {\n        let item = data_array[i];\n\n        if (i === 0) {\n          this.setState({\n            Storage: item.Stor_Name + \" \" + item.Stor_Capacity,\n            storageprice: item.Price\n          });\n        }\n\n        DropDownComp.push( /*#__PURE__*/React.createElement(\"option\", {\n          style: {\n            backgroundColor: 'black',\n            color: '#0eff00'\n          },\n          key: i,\n          value: item.Stor_Name + item.Stor_Capacity,\n          pricevalue: item.Price,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 35\n          }\n        }, item.Stor_Name, \"  \", item.Stor_Capacity, \"  $\", item.Price));\n      }\n\n      this.setState({\n        DropDownComp: DropDownComp\n      });\n    } else if (this.props.collectionName === \"motherboard\") {\n      let response = await this.props.dispatch(motherboardsActions.retrieveMotherboards());\n      this.setState({\n        response\n      });\n      let data_array = this.props.motherboards;\n      let DropDownComp = [];\n      console.log(data_array);\n\n      for (let i = 0; i < data_array.length; i++) {\n        let item = data_array[i];\n\n        if (i === 0) {\n          this.setState({\n            Motherboard: item.Moth_Name,\n            mothprice: item.Price\n          });\n        }\n\n        DropDownComp.push( /*#__PURE__*/React.createElement(\"option\", {\n          style: {\n            backgroundColor: 'black',\n            color: '#0eff00'\n          },\n          key: i,\n          value: item.Moth_Name,\n          pricevalue: item.Price,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 35\n          }\n        }, item.Moth_Name, \"  $\", item.Price));\n      }\n\n      this.setState({\n        DropDownComp: DropDownComp\n      });\n    } else if (this.props.collectionName === \"power_supply\") {\n      let response = await this.props.dispatch(psusActions.retrievePSUS());\n      this.setState({\n        response\n      });\n      let data_array = this.props.psus;\n      let DropDownComp = [];\n      console.log(data_array);\n\n      for (let i = 0; i < data_array.length; i++) {\n        let item = data_array[i];\n\n        if (i === 0) {\n          this.setState({\n            PSU: item.Pow_Name + \" \" + item.Pow_Capacity,\n            psuprice: item.Price\n          });\n        }\n\n        DropDownComp.push( /*#__PURE__*/React.createElement(\"option\", {\n          style: {\n            backgroundColor: 'black',\n            color: '#0eff00'\n          },\n          key: i,\n          pricevalue: item.Price,\n          value: item.Pow_Name + \" \" + item.Pow_Capacity,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 35\n          }\n        }, item.Pow_Name, \"  \", item.Pow_Capacity, \"  $\", item.Price));\n      }\n\n      this.setState({\n        DropDownComp: DropDownComp\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"select\", {\n      onChange: this.handleChange.bind(null),\n      style: {\n        backgroundColor: '#0eff00',\n        color: 'black'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }\n    }, this.state.DropDownComp));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  continents: state.continentReducer.continents,\n  processors: state.cpuReducer.processors,\n  graphicscards: state.gpuReducer.graphicscards,\n  rams: state.ramReducer.rams,\n  storages: state.storageReducer.storages,\n  motherboards: state.motherboardReducer.motherboards,\n  psus: state.psuReducer.psus\n});\n\nexport default connect(mapStateToProps)(NDXSoftwareDropDown);","map":{"version":3,"sources":["/home/nadghantous/Desktop/nadghantousprojects/react/csis-myapp-test/src/components/NDXSoftwareDropDown.js"],"names":["React","Component","retrievePCConfigurations","Link","pcsActions","cpusActions","gpusActions","ramsActions","storagesActions","motherboardsActions","psusActions","connect","continentsActions","NDXSoftwareDropDown","constructor","handleChange","event","props","collectionName","currentIndex","target","options","selectedIndex","CPU","state","DropDownComp","value","cpuprice","pricevalue","console","log","setState","GPU","gpuprice","RAM","ramprice","Storage","storageprice","Motherboard","mothprice","PSU","psuprice","history","push","CPUPrice","GPUPrice","RAMPrice","StoragePrice","MotherboardPrice","PSUPrice","componentDidMount","loadInfo","response","dispatch","retrieveContinents","data_array","continents","i","length","item","backgroundColor","color","id","name","retrieveCPUS","processors","Proc_Name","Proc_Freq","Price","retrieveGPUS","graphicscards","Grap_Name","Grap_Memory","retrieveRAMS","rams","RAM_Name","RAM_Storage","retrieveStorages","storages","Stor_Name","Stor_Capacity","retrieveMotherboards","motherboards","Moth_Name","retrievePSUS","psus","Pow_Name","Pow_Capacity","render","bind","mapStateToProps","continentReducer","cpuReducer","gpuReducer","ramReducer","storageReducer","motherboardReducer","psuReducer"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {retrievePCConfigurations} from '../actions/actions';\nimport '../App.css';\nimport {Link} from  'react-router-dom';\nimport pcsActions  from '../redux/actions/desktops';\nimport cpusActions from '../redux/actions/processors';\nimport gpusActions from '../redux/actions/graphicscards';\nimport ramsActions from '../redux/actions/rams';\nimport storagesActions from '../redux/actions/storages';\nimport motherboardsActions from '../redux/actions/motherboards';\nimport psusActions from '../redux/actions/powersupplies';\nimport { connect } from 'react-redux';\nimport continentsActions from '../redux/actions/continents';\nclass NDXSoftwareDropDown extends Component{\n    constructor(){\n        super();\n        this.state = {\n            DropDownComp:[],\n            CPU: '',\n            cpuprice: 0,\n            GPU: '',\n            gpuprice: 0,\n            RAM:'',\n            ramprice: 0,\n            Storage:'',\n            storageprice: 0,\n            Motherboard: '',\n            mothprice: 0,\n            PSU: '',\n            psuprice: 0,\n        }\n        \n\n\n\n    }\n    componentDidMount(){\n        \n        this.loadInfo();\n    }\n    async loadInfo () {\n        if(this.props.collectionName === \"continents\"){\n            let response = await this.props.dispatch(continentsActions.retrieveContinents());\n        this.setState({response});\n            let data_array = this.props.continents;\n            let DropDownComp = [];\n            console.log(data_array)\n            for(let i = 0; i < data_array.length; i++){\n                let item = data_array[i];\n                DropDownComp.push(<option style={{backgroundColor:'black',color:'#0eff00'}}  key={i} value={item.id}>{item.name}</option>);\n    \n            }\n            this.setState({DropDownComp:DropDownComp});\n        }\n        else if(this.props.collectionName === \"processor\"){\n            let response = await this.props.dispatch(cpusActions.retrieveCPUS());\n            this.setState({response});\n            let data_array = this.props.processors;\n            let DropDownComp = [];\n            console.log(data_array)\n            for(let i = 0; i < data_array.length; i++){\n                let item = data_array[i];\n                if(i === 0){\n                    this.setState({CPU: item.Proc_Name + \" \"+ item.Proc_Freq, cpuprice: item.Price });\n                }\n                DropDownComp.push(<option style={{backgroundColor:'black',color:'#0eff00'}}  key={i} value={item.Proc_Name + \" \"+ item.Proc_Freq} pricevalue={item.Price}>{item.Proc_Name}  {item.Proc_Freq}  ${item.Price}</option>);\n            }\n            this.setState({DropDownComp:DropDownComp});\n        }\n        else if(this.props.collectionName === \"graphics_card\"){\n            let response = await this.props.dispatch(gpusActions.retrieveGPUS());\n            this.setState({response});\n            let data_array = this.props.graphicscards;\n            let DropDownComp = [];\n            console.log(data_array)\n            for(let i = 0; i < data_array.length; i++){\n                let item = data_array[i];\n                if(i === 0){\n                    this.setState({GPU: item.Grap_Name + \" \" + item.Grap_Memory, gpuprice: item.Price });\n                }\n                DropDownComp.push(<option style={{backgroundColor:'black',color:'#0eff00'}} key={i} pricevalue={item.Price} value={item.Grap_Name + \" \"+  item.Grap_Memory}>{item.Grap_Name}  {item.Grap_Memory}  ${item.Price}</option>);\n    \n            }\n            this.setState({DropDownComp:DropDownComp});\n        }\n        else if(this.props.collectionName === \"memory\"){\n            let response = await this.props.dispatch(ramsActions.retrieveRAMS());\n            this.setState({response});\n            let data_array = this.props.rams;\n            let DropDownComp = [];\n            console.log(data_array)\n            for(let i = 0; i < data_array.length; i++){\n                let item = data_array[i];\n                if(i === 0){\n                    this.setState({RAM: item.RAM_Name + \" \"+ item.RAM_Storage, ramprice: item.Price });\n                }\n                DropDownComp.push(<option style={{backgroundColor:'black',color:'#0eff00'}} key={i} pricevalue={item.Price} value={item.RAM_Name + \" \"+ item.RAM_Storage}>{item.RAM_Name}  {item.RAM_Storage}  ${item.Price}</option>);\n    \n            }\n            this.setState({DropDownComp:DropDownComp});\n        }\n        else if(this.props.collectionName === \"storage\"){\n            let response = await this.props.dispatch(storagesActions.retrieveStorages());\n            this.setState({response});\n            let data_array = this.props.storages;\n            let DropDownComp = [];\n            console.log(data_array)\n            for(let i = 0; i < data_array.length; i++){\n                let item = data_array[i];\n                if(i === 0){\n                    this.setState({Storage: item.Stor_Name + \" \"+ item.Stor_Capacity, storageprice: item.Price });\n                }\n                DropDownComp.push(<option style={{backgroundColor:'black',color:'#0eff00'}} key={i} value={item.Stor_Name + item.Stor_Capacity} pricevalue={item.Price} >{item.Stor_Name}  {item.Stor_Capacity}  ${item.Price}</option>);\n    \n            }\n            this.setState({DropDownComp:DropDownComp});\n        }\n        else if(this.props.collectionName === \"motherboard\"){\n            let response = await this.props.dispatch(motherboardsActions.retrieveMotherboards());\n            this.setState({response});\n            let data_array = this.props.motherboards;\n            let DropDownComp = [];\n            console.log(data_array)\n            for(let i = 0; i < data_array.length; i++){\n                let item = data_array[i];\n                if(i === 0){\n                    this.setState({Motherboard: item.Moth_Name, mothprice: item.Price });\n                }\n                DropDownComp.push(<option style={{backgroundColor:'black',color:'#0eff00'}} key={i} value={item.Moth_Name} pricevalue={item.Price} >{item.Moth_Name}  ${item.Price}</option>);\n    \n            }\n            this.setState({DropDownComp:DropDownComp});\n        }\n        else if(this.props.collectionName === \"power_supply\"){\n            let response = await this.props.dispatch(psusActions.retrievePSUS());\n            this.setState({response});\n            let data_array = this.props.psus;\n            let DropDownComp = [];\n            console.log(data_array)\n            for(let i = 0; i < data_array.length; i++){\n                let item = data_array[i]; \n                if(i === 0){\n                    this.setState({PSU: item.Pow_Name + \" \" + item.Pow_Capacity, psuprice: item.Price });\n                }\n                DropDownComp.push(<option style={{backgroundColor:'black',color:'#0eff00'}} key={i} pricevalue={item.Price} value={item.Pow_Name + \" \"+ item.Pow_Capacity}>{item.Pow_Name}  {item.Pow_Capacity}  ${item.Price}</option>);\n    \n            }\n            this.setState({DropDownComp:DropDownComp});\n        }\n\n        \n    }\n    handleChange = (event) => {\n        if(this.props.collectionName === \"processor\"){\n            const currentIndex = event.target.options.selectedIndex;\n            let CPU = this.state.DropDownComp[currentIndex].props.value;\n            let cpuprice = this.state.DropDownComp[currentIndex].props.pricevalue;\n            console.log(CPU);\n            console.log(cpuprice);\n            this.setState({CPU: CPU, cpuprice: cpuprice});\n        }\n       if(this.props.collectionName === \"graphics_card\"){\n            const currentIndex = event.target.options.selectedIndex;\n            let GPU = this.state.DropDownComp[currentIndex].props.value;\n            let gpuprice = this.state.DropDownComp[currentIndex].props.pricevalue;\n            console.log(GPU);\n            console.log(gpuprice);\n            this.setState({GPU: GPU, gpuprice: gpuprice});\n        }\n        if(this.props.collectionName === \"memory\"){\n            this.RAM = event.target.value;\n            const currentIndex = event.target.options.selectedIndex;\n            this.ramprice = this.state.DropDownComp[currentIndex].props.pricevalue;\n            console.log(this.RAM);\n            console.log(this.ramprice);\n        }\n        if(this.props.collectionName === \"storage\"){\n            this.Storage = event.target.value;\n            const currentIndex = event.target.options.selectedIndex;\n            this.storageprice = this.state.DropDownComp[currentIndex].props.pricevalue;\n            console.log(this.Storage);\n            console.log(this.storageprice);\n        }\n        if(this.props.collectionName === \"motherboard\"){\n            this.Motherboard = event.target.value;\n            const currentIndex = event.target.options.selectedIndex;\n            this.mothprice = this.state.DropDownComp[currentIndex].props.pricevalue;\n            console.log(this.Motherboard);\n            console.log(this.mothprice);\n        }\n        if(this.props.collectionName === \"power_supply\"){\n            this.PSU = event.target.value;\n            const currentIndex = event.target.options.selectedIndex;\n            this.psuprice = this.state.DropDownComp[currentIndex].props.pricevalue;\n            console.log(this.PSU);\n            console.log(this.psuprice);\n        }\n        console.log(this.state.CPU);\n        console.log(this.state.GPU);\n        this.props.history.push(\"/addpcconfigurations\", {\n            CPU: this.state.CPU,\n            CPUPrice: this.state.cpuprice,\n            GPU: this.state.GPU,\n            GPUPrice: this.state.gpuprice,\n            RAM: this.state.RAM,\n            RAMPrice: this.state.ramprice,\n            Storage: this.state.Storage,\n            StoragePrice: this.state.storageprice,\n            Motherboard: this.state.Motherboard,\n            MotherboardPrice: this.state.mothprice,\n            PSU: this.state.PSU,\n            PSUPrice: this.state.psuprice\n        })\n      };\n\n    render(){\n\n        return(\n        <div className=\"form-group\">\n        <select onChange={this.handleChange.bind(null)} style={{backgroundColor:'#0eff00',color:'black'}}>{this.state.DropDownComp}</select>\n        </div>\n        );\n    }\n}\nconst mapStateToProps = state =>({\n    continents: state.continentReducer.continents,\n    processors: state.cpuReducer.processors,\n    graphicscards: state.gpuReducer.graphicscards,\n    rams: state.ramReducer.rams,\n    storages: state.storageReducer.storages,\n    motherboards: state.motherboardReducer.motherboards,\n    psus: state.psuReducer.psus,\n  })\n  \n  export default connect(mapStateToProps)(NDXSoftwareDropDown);\n"]},"metadata":{},"sourceType":"module"}