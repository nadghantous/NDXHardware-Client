{"ast":null,"code":"import { retrievePCConfigurations } from '../../actions/actions';\nimport { toast } from 'react-toastify';\nexport const GET_PCS_STARTED = 'GET_PCS_STARTED';\nexport const GET_PCS_SUCCESS = 'GET_PCS_SUCCESS';\nexport const GET_PCS_ERROR = 'GET_PCS_ERROR';\nconst pcsActions = {\n  retrievePCConfigurations: data => async dispatch => {\n    try {\n      dispatch({\n        type: GET_PCS_STARTED\n      });\n      let response = await retrievePCConfigurations(data);\n      dispatch({\n        type: GET_PCS_SUCCESS,\n        payload: {\n          data: response\n        }\n      });\n    } catch (error) {\n      toast.error('ERROR GETTING PC CONFIGURATIONS' + error);\n      dispatch({\n        type: GET_PCS_ERROR\n      });\n    }\n  }\n};\nexport default pcsActions;","map":{"version":3,"sources":["/home/nadghantous/Desktop/nadghantousprojects/react/csis-myapp-test/src/redux/actions/desktops.js"],"names":["retrievePCConfigurations","toast","GET_PCS_STARTED","GET_PCS_SUCCESS","GET_PCS_ERROR","pcsActions","data","dispatch","type","response","payload","error"],"mappings":"AAAA,SAASA,wBAAT,QAAyC,uBAAzC;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAGA,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,MAAMC,aAAa,GAAG,eAAtB;AAEP,MAAMC,UAAU,GAAG;AAEfL,EAAAA,wBAAwB,EAAGM,IAAD,IAAU,MAAOC,QAAP,IAAoB;AACtD,QAAI;AACFA,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEN;AADC,OAAD,CAAR;AAGA,UAAIO,QAAQ,GAAG,MAAMT,wBAAwB,CAACM,IAAD,CAA7C;AACAC,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEL,eADC;AAEPO,QAAAA,OAAO,EAAE;AACPJ,UAAAA,IAAI,EAAEG;AADC;AAFF,OAAD,CAAR;AAMD,KAXD,CAWE,OAAOE,KAAP,EAAc;AACdV,MAAAA,KAAK,CAACU,KAAN,CAAY,oCAAoCA,KAAhD;AACAJ,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEJ;AADC,OAAD,CAAR;AAGD;AACF;AApBc,CAAnB;AAuBE,eAAeC,UAAf","sourcesContent":["import { retrievePCConfigurations } from '../../actions/actions';\nimport { toast } from 'react-toastify'\n\n\nexport const GET_PCS_STARTED = 'GET_PCS_STARTED'\nexport const GET_PCS_SUCCESS = 'GET_PCS_SUCCESS'\nexport const GET_PCS_ERROR = 'GET_PCS_ERROR'\n\nconst pcsActions = {\n\n    retrievePCConfigurations: (data) => async (dispatch) => {\n      try {\n        dispatch({\n          type: GET_PCS_STARTED,\n        });\n        let response = await retrievePCConfigurations(data)\n        dispatch({\n          type: GET_PCS_SUCCESS,\n          payload: {\n            data: response,\n          },\n        });\n      } catch (error) {\n        toast.error('ERROR GETTING PC CONFIGURATIONS' + error)\n        dispatch({\n          type: GET_PCS_ERROR,\n        });\n      }\n    },\n  };\n  \n  export default pcsActions;"]},"metadata":{},"sourceType":"module"}