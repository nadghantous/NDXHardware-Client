{"ast":null,"code":"import { retrieveCPUS } from '../../actions/actions';\nimport { toast } from 'react-toastify';\nexport const GET_PROCESSORS_STARTED = 'GET_PROCESSORS_STARTED';\nexport const GET_PROCESSORS_SUCCESS = 'GET_PROCESSORS_SUCCESS';\nexport const GET_PROCESSORS_ERROR = 'GET_PROCESSORS_ERROR';\nexport const ADD_PROCESSOR_STARTED = 'ADD_PROCESSOR_STARTED';\nexport const ADD_PROCESSOR_SUCCESS = 'ADD_PROCESSOR_SUCCESS';\nexport const ADD_PROCESSOR_ERROR = 'ADD_PROCESSOR_ERROR';\nconst cpusActions = {\n  retrieveCPUS: () => async dispatch => {\n    try {\n      dispatch({\n        type: GET_PROCESSORS_STARTED\n      });\n      let response = await retrieveCPUS();\n      dispatch({\n        type: GET_PROCESSORS_SUCCESS,\n        payload: {\n          data: response\n        }\n      });\n    } catch (error) {\n      toast.error('ERROR GETTING CPUS' + error);\n      dispatch({\n        type: GET_PROCESSORS_ERROR\n      });\n    }\n  },\n  addCPU: data => async dispatch => {\n    try {\n      dispatch({\n        type: ADD_PROCESSOR_STARTED\n      });\n      await addCPU(data);\n      dispatch({\n        type: ADD_PROCESSOR_SUCCESS,\n        payload: {\n          message: 'CPU Added Succesfully !'\n        }\n      });\n      toast.success(\"CPU Successfully Added!\");\n    } catch (err) {\n      dispatch({\n        type: ADD_PROCESSOR_ERROR,\n        payload: {\n          message: 'failed to create account!'\n        }\n      });\n    }\n  }\n};\nexport default cpusActions;","map":{"version":3,"sources":["/home/nadghantous/Desktop/nadghantousprojects/react/csis-myapp-test/src/redux/actions/processors.js"],"names":["retrieveCPUS","toast","GET_PROCESSORS_STARTED","GET_PROCESSORS_SUCCESS","GET_PROCESSORS_ERROR","ADD_PROCESSOR_STARTED","ADD_PROCESSOR_SUCCESS","ADD_PROCESSOR_ERROR","cpusActions","dispatch","type","response","payload","data","error","addCPU","message","success","err"],"mappings":"AAAA,SAASA,YAAT,QAA6B,uBAA7B;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAGA,OAAO,MAAMC,sBAAsB,GAAG,wBAA/B;AACP,OAAO,MAAMC,sBAAsB,GAAG,wBAA/B;AACP,OAAO,MAAMC,oBAAoB,GAAG,sBAA7B;AACP,OAAO,MAAMC,qBAAqB,GAAG,uBAA9B;AACP,OAAO,MAAMC,qBAAqB,GAAG,uBAA9B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AAEP,MAAMC,WAAW,GAAG;AAEhBR,EAAAA,YAAY,EAAE,MAAM,MAAOS,QAAP,IAAoB;AACtC,QAAI;AACFA,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAER;AADC,OAAD,CAAR;AAGA,UAAIS,QAAQ,GAAG,MAAMX,YAAY,EAAjC;AACAS,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEP,sBADC;AAEPS,QAAAA,OAAO,EAAE;AACPC,UAAAA,IAAI,EAAEF;AADC;AAFF,OAAD,CAAR;AAMD,KAXD,CAWE,OAAOG,KAAP,EAAc;AACdb,MAAAA,KAAK,CAACa,KAAN,CAAY,uBAAuBA,KAAnC;AACAL,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEN;AADC,OAAD,CAAR;AAGD;AACF,GApBe;AAqBhBW,EAAAA,MAAM,EAAGF,IAAD,IAAU,MAAOJ,QAAP,IAAoB;AACpC,QAAI;AACFA,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEL;AADC,OAAD,CAAR;AAGA,YAAMU,MAAM,CAACF,IAAD,CAAZ;AACAJ,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEJ,qBADC;AAEPM,QAAAA,OAAO,EAAE;AACPI,UAAAA,OAAO,EAAE;AADF;AAFF,OAAD,CAAR;AAMAf,MAAAA,KAAK,CAACgB,OAAN,CAAc,yBAAd;AACD,KAZD,CAYE,OAAOC,GAAP,EAAY;AACZT,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEH,mBADC;AAEPK,QAAAA,OAAO,EAAE;AACPI,UAAAA,OAAO,EAAE;AADF;AAFF,OAAD,CAAR;AAOD;AACF;AA3Ce,CAApB;AA8CE,eAAeR,WAAf","sourcesContent":["import { retrieveCPUS } from '../../actions/actions';\nimport { toast } from 'react-toastify'\n\n\nexport const GET_PROCESSORS_STARTED = 'GET_PROCESSORS_STARTED'\nexport const GET_PROCESSORS_SUCCESS = 'GET_PROCESSORS_SUCCESS'\nexport const GET_PROCESSORS_ERROR = 'GET_PROCESSORS_ERROR'\nexport const ADD_PROCESSOR_STARTED = 'ADD_PROCESSOR_STARTED'\nexport const ADD_PROCESSOR_SUCCESS = 'ADD_PROCESSOR_SUCCESS'\nexport const ADD_PROCESSOR_ERROR = 'ADD_PROCESSOR_ERROR'\n\nconst cpusActions = {\n\n    retrieveCPUS: () => async (dispatch) => {\n      try {\n        dispatch({\n          type: GET_PROCESSORS_STARTED,\n        });\n        let response = await retrieveCPUS()\n        dispatch({\n          type: GET_PROCESSORS_SUCCESS,\n          payload: {\n            data: response,\n          },\n        });\n      } catch (error) {\n        toast.error('ERROR GETTING CPUS' + error)\n        dispatch({\n          type: GET_PROCESSORS_ERROR,\n        });\n      }\n    },\n    addCPU: (data) => async (dispatch) => {\n      try {\n        dispatch({\n          type: ADD_PROCESSOR_STARTED,\n        });\n        await addCPU(data);\n        dispatch({\n          type: ADD_PROCESSOR_SUCCESS,\n          payload: {\n            message: 'CPU Added Succesfully !',\n          }\n        });\n        toast.success(\"CPU Successfully Added!\");\n      } catch (err) {\n        dispatch({\n          type: ADD_PROCESSOR_ERROR,\n          payload: {\n            message: 'failed to create account!',\n          }\n        })\n       \n      }\n    }\n  };\n  \n  export default cpusActions;"]},"metadata":{},"sourceType":"module"}