{"ast":null,"code":"import { retrieveGPUS, addGPU } from '../../actions/actions';\nimport { toast } from 'react-toastify';\nexport const GET_GRAPHICSCARDS_STARTED = 'GET_GRAPHICSCARDS_STARTED';\nexport const GET_GRAPHICSCARDS_SUCCESS = 'GET_GRAPHICSCARDS_SUCCESS';\nexport const GET_GRAPHICSCARDS_ERROR = 'GET_GRAPHICSCARDS_ERROR';\nexport const ADD_GRAPHICSCARD_STARTED = 'ADD_GRAPHICSCARD_STARTED';\nexport const ADD_GRAPHICSCARD_SUCCESS = 'ADD_GRAPHICSCARD_SUCCESS';\nexport const ADD_GRAPHICSCARD_ERROR = 'ADD_GRAPHICSCARD_ERROR';\nconst gpusActions = {\n  retrieveGPUS: () => async dispatch => {\n    try {\n      dispatch({\n        type: GET_GRAPHICSCARDS_STARTED\n      });\n      let response = await retrieveGPUS();\n      dispatch({\n        type: GET_GRAPHICSCARDS_SUCCESS,\n        payload: {\n          data: response\n        }\n      });\n    } catch (error) {\n      toast.error('ERROR GETTING GPUS' + error);\n      dispatch({\n        type: GET_GRAPHICSCARDS_ERROR\n      });\n    }\n  },\n  addGPU: data => async dispatch => {\n    try {\n      dispatch({\n        type: ADD_GRAPHICSCARD_STARTED\n      });\n      await addGPU(data);\n      dispatch({\n        type: ADD_GRAPHICSCARD_SUCCESS,\n        payload: {\n          message: 'GPU Added Succesfully !'\n        }\n      });\n      toast.success(\"GPU Successfully Added!\");\n    } catch (err) {\n      dispatch({\n        type: ADD_GRAPHICSCARD_ERROR,\n        payload: {\n          message: 'failed to add GPU!'\n        }\n      });\n    }\n  }\n};\nexport default gpusActions;","map":{"version":3,"sources":["/home/nadghantous/Desktop/nadghantousprojects/react/csis-myapp-test/src/redux/actions/graphicscards.js"],"names":["retrieveGPUS","addGPU","toast","GET_GRAPHICSCARDS_STARTED","GET_GRAPHICSCARDS_SUCCESS","GET_GRAPHICSCARDS_ERROR","ADD_GRAPHICSCARD_STARTED","ADD_GRAPHICSCARD_SUCCESS","ADD_GRAPHICSCARD_ERROR","gpusActions","dispatch","type","response","payload","data","error","message","success","err"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,MAAvB,QAAqC,uBAArC;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAGA,OAAO,MAAMC,yBAAyB,GAAG,2BAAlC;AACP,OAAO,MAAMC,yBAAyB,GAAG,2BAAlC;AACP,OAAO,MAAMC,uBAAuB,GAAG,yBAAhC;AACP,OAAO,MAAMC,wBAAwB,GAAG,0BAAjC;AACP,OAAO,MAAMC,wBAAwB,GAAG,0BAAjC;AACP,OAAO,MAAMC,sBAAsB,GAAG,wBAA/B;AAEP,MAAMC,WAAW,GAAG;AAEhBT,EAAAA,YAAY,EAAE,MAAM,MAAOU,QAAP,IAAoB;AACtC,QAAI;AACFA,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAER;AADC,OAAD,CAAR;AAGA,UAAIS,QAAQ,GAAG,MAAMZ,YAAY,EAAjC;AACAU,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEP,yBADC;AAEPS,QAAAA,OAAO,EAAE;AACPC,UAAAA,IAAI,EAAEF;AADC;AAFF,OAAD,CAAR;AAMD,KAXD,CAWE,OAAOG,KAAP,EAAc;AACdb,MAAAA,KAAK,CAACa,KAAN,CAAY,uBAAuBA,KAAnC;AACAL,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEN;AADC,OAAD,CAAR;AAGD;AACF,GApBe;AAqBhBJ,EAAAA,MAAM,EAAGa,IAAD,IAAU,MAAOJ,QAAP,IAAoB;AACpC,QAAI;AACFA,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEL;AADC,OAAD,CAAR;AAGA,YAAML,MAAM,CAACa,IAAD,CAAZ;AACAJ,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEJ,wBADC;AAEPM,QAAAA,OAAO,EAAE;AACPG,UAAAA,OAAO,EAAE;AADF;AAFF,OAAD,CAAR;AAMAd,MAAAA,KAAK,CAACe,OAAN,CAAc,yBAAd;AACD,KAZD,CAYE,OAAOC,GAAP,EAAY;AACZR,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEH,sBADC;AAEPK,QAAAA,OAAO,EAAE;AACPG,UAAAA,OAAO,EAAE;AADF;AAFF,OAAD,CAAR;AAOD;AACF;AA3Ce,CAApB;AA8CE,eAAeP,WAAf","sourcesContent":["import { retrieveGPUS, addGPU } from '../../actions/actions';\nimport { toast } from 'react-toastify'\n\n\nexport const GET_GRAPHICSCARDS_STARTED = 'GET_GRAPHICSCARDS_STARTED'\nexport const GET_GRAPHICSCARDS_SUCCESS = 'GET_GRAPHICSCARDS_SUCCESS'\nexport const GET_GRAPHICSCARDS_ERROR = 'GET_GRAPHICSCARDS_ERROR'\nexport const ADD_GRAPHICSCARD_STARTED = 'ADD_GRAPHICSCARD_STARTED'\nexport const ADD_GRAPHICSCARD_SUCCESS = 'ADD_GRAPHICSCARD_SUCCESS'\nexport const ADD_GRAPHICSCARD_ERROR = 'ADD_GRAPHICSCARD_ERROR'\n\nconst gpusActions = {\n\n    retrieveGPUS: () => async (dispatch) => {\n      try {\n        dispatch({\n          type: GET_GRAPHICSCARDS_STARTED,\n        });\n        let response = await retrieveGPUS()\n        dispatch({\n          type: GET_GRAPHICSCARDS_SUCCESS,\n          payload: {\n            data: response,\n          },\n        });\n      } catch (error) {\n        toast.error('ERROR GETTING GPUS' + error)\n        dispatch({\n          type: GET_GRAPHICSCARDS_ERROR,\n        });\n      }\n    },\n    addGPU: (data) => async (dispatch) => {\n      try {\n        dispatch({\n          type: ADD_GRAPHICSCARD_STARTED,\n        });\n        await addGPU(data);\n        dispatch({\n          type: ADD_GRAPHICSCARD_SUCCESS,\n          payload: {\n            message: 'GPU Added Succesfully !',\n          }\n        });\n        toast.success(\"GPU Successfully Added!\");\n      } catch (err) {\n        dispatch({\n          type: ADD_GRAPHICSCARD_ERROR,\n          payload: {\n            message: 'failed to add GPU!',\n          }\n        })\n       \n      }\n    }\n  };\n  \n  export default gpusActions;"]},"metadata":{},"sourceType":"module"}