{"ast":null,"code":"import { retrieveCPUS } from '../../actions/actions';\nimport { toast } from 'react-toastify';\nexport const GET_PROCESSORS_STARTED = 'GET_PROCESSORS_STARTED';\nexport const GET_PROCESSORS_SUCCESS = 'GET_PROCESSORS_SUCCESS';\nexport const GET_PROCESSORS_ERROR = 'GET_PROCESSORS_ERROR';\nconst cpusActions = {\n  retrieveCPUS: () => async dispatch => {\n    try {\n      dispatch({\n        type: GET_PROCESSORS_STARTED\n      });\n      let response = await retrieveCPUS();\n      dispatch({\n        type: GET_PROCESSORS_SUCCESS,\n        payload: {\n          data: response\n        }\n      });\n    } catch (error) {\n      toast.error('ERROR GETTING CPUS' + error);\n      dispatch({\n        type: GET_PROCESSORS_ERROR\n      });\n    }\n  }\n};\nexport default cpusActions;","map":{"version":3,"sources":["/home/nadghantous/Desktop/nadghantousprojects/react/csis-myapp-test/src/redux/actions/processors.js"],"names":["retrieveCPUS","toast","GET_PROCESSORS_STARTED","GET_PROCESSORS_SUCCESS","GET_PROCESSORS_ERROR","cpusActions","dispatch","type","response","payload","data","error"],"mappings":"AAAA,SAASA,YAAT,QAA6B,uBAA7B;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAGA,OAAO,MAAMC,sBAAsB,GAAG,wBAA/B;AACP,OAAO,MAAMC,sBAAsB,GAAG,wBAA/B;AACP,OAAO,MAAMC,oBAAoB,GAAG,sBAA7B;AAEP,MAAMC,WAAW,GAAG;AAEhBL,EAAAA,YAAY,EAAE,MAAM,MAAOM,QAAP,IAAoB;AACtC,QAAI;AACFA,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEL;AADC,OAAD,CAAR;AAGA,UAAIM,QAAQ,GAAG,MAAMR,YAAY,EAAjC;AACAM,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEJ,sBADC;AAEPM,QAAAA,OAAO,EAAE;AACPC,UAAAA,IAAI,EAAEF;AADC;AAFF,OAAD,CAAR;AAMD,KAXD,CAWE,OAAOG,KAAP,EAAc;AACdV,MAAAA,KAAK,CAACU,KAAN,CAAY,uBAAuBA,KAAnC;AACAL,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEH;AADC,OAAD,CAAR;AAGD;AACF;AApBe,CAApB;AAuBE,eAAeC,WAAf","sourcesContent":["import { retrieveCPUS } from '../../actions/actions';\nimport { toast } from 'react-toastify'\n\n\nexport const GET_PROCESSORS_STARTED = 'GET_PROCESSORS_STARTED'\nexport const GET_PROCESSORS_SUCCESS = 'GET_PROCESSORS_SUCCESS'\nexport const GET_PROCESSORS_ERROR = 'GET_PROCESSORS_ERROR'\n\nconst cpusActions = {\n\n    retrieveCPUS: () => async (dispatch) => {\n      try {\n        dispatch({\n          type: GET_PROCESSORS_STARTED,\n        });\n        let response = await retrieveCPUS()\n        dispatch({\n          type: GET_PROCESSORS_SUCCESS,\n          payload: {\n            data: response,\n          },\n        });\n      } catch (error) {\n        toast.error('ERROR GETTING CPUS' + error)\n        dispatch({\n          type: GET_PROCESSORS_ERROR,\n        });\n      }\n    },\n  };\n  \n  export default cpusActions;"]},"metadata":{},"sourceType":"module"}