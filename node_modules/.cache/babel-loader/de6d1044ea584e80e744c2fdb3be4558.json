{"ast":null,"code":"import { retrievePCConfigurations, addPCConfiguration } from '../../actions/actions';\nimport { toast } from 'react-toastify';\nexport const GET_PCS_STARTED = 'GET_PCS_STARTED';\nexport const GET_PCS_SUCCESS = 'GET_PCS_SUCCESS';\nexport const GET_PCS_ERROR = 'GET_PCS_ERROR';\nexport const ADD_PC_STARTED = 'ADD_PC_STARTED';\nexport const ADD_PC_SUCCESS = 'ADD_PC_SUCCESS';\nexport const ADD_PC_ERROR = 'ADD_PC_ERROR';\nconst pcsActions = {\n  retrievePCConfigurations: data => async dispatch => {\n    try {\n      dispatch({\n        type: GET_PCS_STARTED\n      });\n      let response = await retrievePCConfigurations(data);\n      dispatch({\n        type: GET_PCS_SUCCESS,\n        payload: {\n          data: response\n        }\n      });\n    } catch (error) {\n      toast.error('ERROR GETTING PC CONFIGURATIONS' + error);\n      dispatch({\n        type: GET_PCS_ERROR\n      });\n    }\n  },\n  addPCConfiguration: data => async dispatch => {\n    try {\n      dispatch({\n        type: ADD_PC_STARTED\n      });\n      await addPCConfiguration(data);\n      dispatch({\n        type: ADD_PC_SUCCESS,\n        payload: {\n          message: 'PC Added Succesfully !'\n        }\n      });\n      toast.success(\"PC Successfully Added!\");\n    } catch (err) {\n      dispatch({\n        type: ADD_PC_ERROR,\n        payload: {\n          message: 'failed to add PC!'\n        }\n      });\n    }\n  }\n};\nexport default pcsActions;","map":{"version":3,"sources":["/home/nadghantous/Desktop/nadghantousprojects/react/csis-myapp-test/src/redux/actions/desktops.js"],"names":["retrievePCConfigurations","addPCConfiguration","toast","GET_PCS_STARTED","GET_PCS_SUCCESS","GET_PCS_ERROR","ADD_PC_STARTED","ADD_PC_SUCCESS","ADD_PC_ERROR","pcsActions","data","dispatch","type","response","payload","error","message","success","err"],"mappings":"AAAA,SAASA,wBAAT,EAAkCC,kBAAlC,QAA4D,uBAA5D;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAGA,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,MAAMC,aAAa,GAAG,eAAtB;AACP,OAAO,MAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,MAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,MAAMC,YAAY,GAAG,cAArB;AACP,MAAMC,UAAU,GAAG;AAEfT,EAAAA,wBAAwB,EAAGU,IAAD,IAAU,MAAOC,QAAP,IAAoB;AACtD,QAAI;AACFA,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAET;AADC,OAAD,CAAR;AAGA,UAAIU,QAAQ,GAAG,MAAMb,wBAAwB,CAACU,IAAD,CAA7C;AACAC,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAER,eADC;AAEPU,QAAAA,OAAO,EAAE;AACPJ,UAAAA,IAAI,EAAEG;AADC;AAFF,OAAD,CAAR;AAMD,KAXD,CAWE,OAAOE,KAAP,EAAc;AACdb,MAAAA,KAAK,CAACa,KAAN,CAAY,oCAAoCA,KAAhD;AACAJ,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEP;AADC,OAAD,CAAR;AAGD;AACF,GApBc;AAqBfJ,EAAAA,kBAAkB,EAAGS,IAAD,IAAU,MAAOC,QAAP,IAAoB;AAChD,QAAI;AACFA,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEN;AADC,OAAD,CAAR;AAGA,YAAML,kBAAkB,CAACS,IAAD,CAAxB;AACAC,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEL,cADC;AAEPO,QAAAA,OAAO,EAAE;AACPE,UAAAA,OAAO,EAAE;AADF;AAFF,OAAD,CAAR;AAMAd,MAAAA,KAAK,CAACe,OAAN,CAAc,wBAAd;AACD,KAZD,CAYE,OAAOC,GAAP,EAAY;AACZP,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEJ,YADC;AAEPM,QAAAA,OAAO,EAAE;AACPE,UAAAA,OAAO,EAAE;AADF;AAFF,OAAD,CAAR;AAOD;AACF;AA3Cc,CAAnB;AA8CE,eAAeP,UAAf","sourcesContent":["import { retrievePCConfigurations,addPCConfiguration } from '../../actions/actions';\nimport { toast } from 'react-toastify'\n\n\nexport const GET_PCS_STARTED = 'GET_PCS_STARTED'\nexport const GET_PCS_SUCCESS = 'GET_PCS_SUCCESS'\nexport const GET_PCS_ERROR = 'GET_PCS_ERROR'\nexport const ADD_PC_STARTED = 'ADD_PC_STARTED'\nexport const ADD_PC_SUCCESS = 'ADD_PC_SUCCESS'\nexport const ADD_PC_ERROR = 'ADD_PC_ERROR'\nconst pcsActions = {\n\n    retrievePCConfigurations: (data) => async (dispatch) => {\n      try {\n        dispatch({\n          type: GET_PCS_STARTED,\n        });\n        let response = await retrievePCConfigurations(data)\n        dispatch({\n          type: GET_PCS_SUCCESS,\n          payload: {\n            data: response,\n          },\n        });\n      } catch (error) {\n        toast.error('ERROR GETTING PC CONFIGURATIONS' + error)\n        dispatch({\n          type: GET_PCS_ERROR,\n        });\n      }\n    },\n    addPCConfiguration: (data) => async (dispatch) => {\n      try {\n        dispatch({\n          type: ADD_PC_STARTED,\n        });\n        await addPCConfiguration(data);\n        dispatch({\n          type: ADD_PC_SUCCESS,\n          payload: {\n            message: 'PC Added Succesfully !',\n          }\n        });\n        toast.success(\"PC Successfully Added!\");\n      } catch (err) {\n        dispatch({\n          type: ADD_PC_ERROR,\n          payload: {\n            message: 'failed to add PC!',\n          }\n        })\n       \n      }\n    }\n  };\n  \n  export default pcsActions;"]},"metadata":{},"sourceType":"module"}